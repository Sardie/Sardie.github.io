fit3 <- lm(Fertility~ Agriculture+Examination+Education, data=swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3.residuals)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum~ravenScore, data=ravenData)
mdl <- glm(ravenWinNum~ravenScore, data=ravenData, family="binomial")
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
lodds
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000, 50))
head(hits)
class(hits$date)
as.integer(head(hits[,'date']))
mdl <- glm(visits~date, data=hits, family='poisson')
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits~date, data=hits, family='poisson', offset=log(vists+1))
mdl2 <- glm(visits~date, data=hits, family='poisson', offset=log(visits+1))
mdl2 <- glm(simplystats~date, data=hits, family='poisson', offset=log(visits+1))
qpois(.95, mdl$fitted.values[704])
qpois(.95, mdl2$fitted.values[704])
library(MASS)
?shuttle
head(shuttle)
unique(use)
unique(shuttle$use)
mdl <- glm(use~wind, data=shuttle, family="poisson")
mdl <- glm(use~wind, data=shuttle, family="binomial")
summary(mdl)
exp(coeff(mdl))
exp(coef(mdl))
wind2 <- relevel(shuttle$wind, "head")
mdl <- glm(use~wind2, data=shuttle, family="binomial")
exp(coef(mdl))
wind2 <- relevel(shuttle$wind, "tail")
mdl <- glm(use~wind2, data=shuttle, family="binomial")
exp(coef(mdl))
wind2 <- relevel(shuttle$wind, "head")
mdl <- glm(use~wind2+magn, data=shuttle, family="binomial")
exp(coef(mdl))
mdl <- glm(use~wind2, data=shuttle, family="binomial")
mdl2 <- glm(use~wind2-1, data=shuttle, family="binomial")
summary(mdl)
summary(mdl2)
library(dataset)
library(datasets)
head(InsectSprays)
mdl <- glm(count~factor(spray), data=InsectSprays, family="poisson")
summary(mdl)
exp(coef(mdl))
mdl <- glm(count~factor(spray)-1, data=InsectSprays, family="poisson")
summary(mdl)
exp(coef(mdl))
install.packages("caret")
install.packages("kernlab")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam&type. p=0.75, list=FALSE)
inTrain <- createDataPartition(y=spam&type, p=0.75, list=FALSE)
?createDataPartition
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-intrain,]
testing <- spam[-inTrain,]
nrow(training)
nrow(testing)
nrow(spam)
1150/4601
set.seed(32343)
modelFit <- train(type~., data=training, method='glm')
install.packages("e1071")
install.packages("e1071")
modelFit <- train(type~., data=training, method='glm')
modelFit
set.seed(32100)
modelFit <- train(type~., data=training, method='glm')
modelFit
library(caret)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training)
head(training)
a <- row.names(training)
a
library(HMISC)
install.packages("HMISC")
install.packages("Hmisc")
library(Hmisc)
?cut2
cutInd <- cut2(as.Integer(row.names(training))
)
cutInd <- cut2(as.integer(row.names(training)))
cutInd
names(training)
plot(training$CompressiveStrength)
log(-1)
hist(training$Superplasticizer)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)["IL" %in% names(training)]
names(training)
?grep
a <- grep("IL", names(training))
a
b <- training[,a]
length(a)
prComp <- prcomp(b)
prComp$rotation
b <- b[1:12]
prComp <- prcomp(b)
prComp$rotation
str(prComp)
prComp
summary(prComp)
preProc <- preProcess(b, method="pca")
summary(preProc)
preProc
trainPC <- predict(preProc, training)
library(caret)
library(kernlab)
data(spam)
names(spam)
summary(spam)
sapply(spam, class)
summry(caret)
summary(caret)
?caret
??caret
library(ISLR)
install.packages("ISLR")
install.packages("ISLR")
install.packages("ISLR")
library(ISLR)
?train
names(getModelInfo())
data(Wage)
sapply(Wage, class)
inTrain <- createDataPartition(y=spam, p=0.75, list=F)
?createDataPartition
inTrain <- createDataPartition(y=Wage$wage, p=0.75, list=F)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
set.seed(32343)
model <- train(wage~., data=training, method="glm")
model
model$finalModel
predictions <- predict(model, newdata=testing)
confusionMatrix(predictions, testing$wage)
predictions
model <- train(wage~., data=training, method="lm")
model
model$finalModel
predictions <- predict(model, newdata=testing)
names(training)
model <- train(wage~sex+race+education+jobclass, data=training, method="lm")
model
model <- train(wage~sex+race+education+jobclass+age, data=training, method="lm")
model
model <- train(wage~sex+race+education+jobclass+age+health, data=training, method="lm")
model
model <- train(wage~sex+race+education+jobclass+age+health+year, data=training, method="lm")
model
names(Wage)
model <- train(wage~sex+race+education+jobclass+age+health+year+maritl, data=training, method="lm")
names(Wage)
model
model <- train(wage~sex+race+education+jobclass+age+health+year+maritl+region, data=training, method="lm")
model
model <- train(wage~sex+race+education+jobclass+age+health+year+maritl+region+health_ins, data=training, method="lm")
model
model <- train(wage~sex+race+education+jobclass+age+health+year+maritl+region+health_ins+logwage, data=training, method="lm")
modek
model
model <- train(wage~logwage, data=training, method="lm")
model
head(Wage[c(10,11),])
head(Wage[,c(10,11)])
head(Wage[,c(11,12)])
model <- train(logwage~education+sex+race+region+jobclass+year, data=training, method="lm")
warnings()
model <- train(logwage~education+sex+race+region+jobclass+year, data=training, method="glm")
model
model <- train(logwage~jobclass, data=training, method="glm")
model
sapply(Wage, class)
model <- train(logwage~jobclass+race, data=training, method="glm")
model
model <- train(logwage~jobclass+race+maritl+education+region+health+health_ins, data=training, method="glm")
model <- train(logwage~jobclass+race+maritl, data=training, method="glm")
model
model <- train(logwage~jobclass+race+maritl+education, data=training, method="glm")
modek
model
model <- train(logwage~jobclass+race+maritl+education+region, data=training, method="glm")
head(Wage$region)
model <- train(logwage~jobclass+race+maritl+education+health+health_ins, data=training, method="glm")
model
model <- train(logwage~jobclass+race+maritl+education+health+health_ins+factor(year), data=training, method="glm")
model
model <- train(logwage~jobclass+race+maritl+education+health+health_ins+factor(year)+factor(age), data=training, method="glm")
model
model <- train(logwage~jobclass+race+maritl+education+health+health_ins+factor(year), data=training, method="glm")
model
library(datasets)
data(mtcars)
sapply(mtcars, class)
fit <- lm(mpg~factor(am),data=mtcars)
model <- train(mpg~factor(am), data=mtcars, method="lm")
fit
model
summary(fit)
library(AppliedPredictiveMModeling)
library(AppliedPredictiveModeling)
date(concrete)
data(concrete)
library(caret)
set.seed(975)
inTrain = creatDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
?preProcess
preProcess(training, method="pca")
head(training)
?grep
t2 <- training[,grep("IL", names(training))]
preProcess(t2, method="pca")
pp <- preProcess(t2, method="pca")
summary(pp)
pp
str(pp)
?preProcess
pp <- preProcess(t2, method="pca", thresh=0/8)
pp <- preProcess(t2, method="pca", thresh=0.8)
pp
dim(pp)
pp
?train
head(training)
head(t2)
?diagnosis
names(predictor)
names(predictors)
p1 <- predictors[, grep("IL", names(predictors))]
names(diagnosis)
head(diagnosis)
head(training)
names(t2)
?grep
t3 <- training[, grep("IL^", names(training))]
t3 <- training[, grep("IL*", names(training))]
names(t3)
t3 <- training[, grep("IL$", names(training), fixed=TRUE)]
t3 <- training[, grep("IL*", names(training), fixed=TRUE)]
t3 <- training[, grep("IL^", names(training), fixed=TRUE)]
t3 <- training[, grep("IL%", names(training), fixed=TRUE)]
pp <- preProcess(t3, method="pca")
pp <- preProcess(t2, method="pca")
pp
pp <- preProcess(t2, method="pca", thresh=08)
pp <- preProcess(t2, method="pca", thresh=0.8)
pp
train(t2, training[1], method="glm")
names(training)
train(t2, training$diagnosis, method="glm")
train(pp, training$diagnosis, method="glm")
?preprocess
?preProcess
pp$ranges
pp$numComp
pp$dim
head(pp)
?pp
names{pp}
names(pp)
pp$data
pp$knnsummary
pp$knnSummary
pp$pcaComp
pp$thresh
pp$bc
list(pp)
train(pp, training$diagnosis, method="glm")
train(t2, training$diagnosis, method="glm")
names(t2)
t2 <- t2[,1:12]
train(t2, training$diagnosis, method="glm")
?predict
model <- train(t2, training$diagnosis, method="glm")
predict(model, testing)
model2 <- train(t2, training$diagnosis, method="glm", preProcess=c("pca", "thresh=0.8"))
t3 <- t2[,pp]
t3 <- t2[pp,]
t3 <- t2[pp]
pp
summary(pp)
pp$k
pp$yj
pp$rotation
pp <- preprocess(t2, method="pca", thresh=0/8)
pp <- preProcess(t2, method="pca", thresh=0.8)
pp
predict(model, testing)
sum(predict(model, testing)-testing)
predict(model, testing)-testing
testing
?predict
predict(model, testing)-testing[1]
testing[1]
sum(predict(model, testing)=testing[1])
predict(model, testing)==testing[1]
head(predict(model, testing))
head(testing[1])
pred <- predict(model, testing)
summary(pred)
summary(testing[1])
dim(pred)
pred
testing[1]
class(testing[1])
class(pred)
testing[1] <- as.factor(testing[1])
result <- testing[1]
result <- as.list(result)
result
pred == result
result
pred
pred == result$diagnosis
sum(pred == result$diagnosis)
=53/82
53/82
model2 <- train(t2, training$diagnosis, method="glm", preProcess=c("pca"))
pred2 <- predict(model2, testing)
pred2 <- predict(model2, testing[1])
summary(model2)
names(model)
coef(mocel)
coef(model)
coeff(model)
model
summary(model)
head(pp)
pp
comp(pp)
model2 <- train(t2, training$diagnosis, method="glm", preProcess=c("pca", "pcathresh=0.8"))
model2 <- train(t2, training$diagnosis, method="glm", preProcess=c("pca", pcathresh=0.8))
model2 <- train(t2, training$diagnosis, method="glm", preProcess=c("pca", thresh=0.8))
load("~/.Rhistory")
load("C:/Users/WingMun/Desktop/PracticalMachineLearning/.Rhistory")
load("C:/Users/WingMun/Desktop/PracticalMachineLearning/.RData")
b
naCols
d <- sapply(a, mean, na.rm = T)
d
d <- sapply(a, mean, na.rm = F)
d
d[is.na(d)]
d == NA
a[is.na(d)]
d <- sapply(a, mean, na.rm = F)9d
e <- a[is.na(d)]
len(d[is.na(d)])
length(d[is.na(d)])
d
d <- sapply(a, mean, na.rm = T)
d
e <- a[is.na(d)]
length(d[is.na(d)])
e
head(e)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
data <- segmentationOriginal
inTrain <- createDataPartition(y=data$classe, p=0.7, list=FALSE)
names(data)
?AppliedPredictiveModeling
head(data$case)
head(data$Case)
inTrain <- createDataPartition(y=data$Case, p=0.7, list=FALSE)
training <- data[inTrain,]
testing <- data[-inTrain,]
model <- train(Case~., data=training, method="rpart")
modle
model
head(data)
inTrain <- createDataPartition(y=data$Class, p=0.7, list=FALSE)
training <- data[inTrain,]
testing <- data[-inTrain,]
model <- train(Class~., data=training, method="rpart")
predict(model, data.frame(TotalIntech2 = 23000, FiberWidthCh1 = 10; PerimStatusCh1=2))
predict(model, data.frame(TotalIntech2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(model, data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(model, data.frame(TotalIntenCh2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
names(data)
summary(model)
predict(model, data.frame(TotalIntenCh2 = 50000, FiberWidthCh1 = 10, VarIntenCh4=100))
names(data)
predict(model, data.frame(TotalIntenCh2 = 50000, FiberWidthCh1 = 10, VarIntenCh4 = 100))
summary(model)
predict(model, data.frame(TotalIntenCh2 = 50000, FiberWidthCh1 = 10))
predict(model, data.frame(TotalIntenCh2 = 50000))
predict(model, data.frame(FiberWidthCh1 = 10))
predict(model, data.frame("TotalIntenCh2" = 50000, "FiberWidthCh1" = 10, "VarIntenCh4" = 100))
getTree(model)
library(pgmm)
data(olive)
olive = olive[,-1]
set.seed(125)
names(olive)
model <- train(Area~., data=olive, method="rf")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSSA)
names(trainSA)
?SAheart
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
misClass(trainSA, predict(model, trainSA))
missClass(trainSA, predict(model, trainSA))
missClass(testSA, predict(model, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(13234)
set.seed(33833)
names(vowel.test)
model <- train(y~., data=vowel.train, method="rf", prox=TRUE)
install.packages(c("Rcpp", "httpuv", "shiny"))
shiny::runApp('C:/Users/WingMun/Desktop/DevelopingDataProducts/Assignment')
shiny::runApp('C:/Users/WingMun/Desktop/DevelopingDataProducts/Assignment')
shiny::runApp('C:/Users/WingMun/Desktop/DevelopingDataProducts/Assignment')
shiny::runApp('C:/Users/WingMun/Desktop/DevelopingDataProducts/Assignment')
library(UsingR)
?UsingR
data(iris)
names(iris)
file.edit("~/Rprofile")
file.edit("./Rprofile")
file.edit('~/.Rprofile')
install.packages("RCurl")
setwd("C:/DevelopingDataProducts_Assignment/Assignment2OnGithub")
publish("Slidify", "index.html", host="rpubs")
library(slidify)
publish("Slidify", "index.html", host="rpubs")
publish("Slidify", "index.html", host=rpubs)
publish("Slidify", "index.html", host="rpubs")
publish("Slidify", "index.Rmd", host="rpubs")
publish_rpubs("slidify", "index.html")
publish_rpubs("slidify", "index.Rmd")
publish_rpubs("slidify", "index.md")
remove.packages("markdown")
library(devtools)
install_github('rstudio/markdown')
setwd("C:/DevelopingDataProducts_Assignment/Assignment2OnGithub")
rpubsUpload('test','index.html')
library(markdown)
library(rmarkdown)
rpubsUpload('test','index.html')
